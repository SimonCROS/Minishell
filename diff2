diff --git a/includes/minishell.h b/includes/minishell.h
index e0ef235..9edab95 100644
--- a/includes/minishell.h
+++ b/includes/minishell.h
@@ -62,9 +62,11 @@ struct s_token
 	int				quoted;
 	int				separator;
 	t_list			*children;
+	t_list			*parent;
 };
 
 int			is_valid_variable_char(char c, char *str);
+t_token		*new_token(t_list *tokens, t_token_type type, t_token *t, int push);
 
 /*** Parsing ******************************************************************/
 
diff --git a/libft b/libft
index 5a45cff..2a05358 160000
--- a/libft
+++ b/libft
@@ -1 +1 @@
-Subproject commit 5a45cfff8183d9ced9585b3f66682554fc98ca88
+Subproject commit 2a05358af19c18f874221e540d8c8dc43d7664c5
diff --git a/src/parsing/tokenizer.c b/src/parsing/tokenizer.c
index 23ec913..bcb7c8f 100644
--- a/src/parsing/tokenizer.c
+++ b/src/parsing/tokenizer.c
@@ -19,7 +19,7 @@ t_token	null_token(void)
 	return ((t_token){});
 }
 
-static t_token	*new_token(t_list *tokens, t_token_type type, t_token *cur)
+t_token	*new_token(t_list *tokens, t_token_type type, t_token *cur, int p)
 {
 	t_token	*token;
 
@@ -33,14 +33,8 @@ static t_token	*new_token(t_list *tokens, t_token_type type, t_token *cur)
 	token->separator = type == T_SEPARATOR || type == T_PIPE;
 	token->buffer = str_new();
 	token->children = lst_new((t_con)free_token);
-	if (!token->buffer)
-	{
-		free_token(token);
-		return (NULL);
-	}
-	if (!tokens)
-		return (token);
-	if (!lst_push(tokens, token))
+	token->parent = tokens;
+	if (!token->buffer || !token->children || (p && !lst_push(tokens, token)))
 	{
 		free_token(token);
 		return (NULL);
@@ -62,13 +56,13 @@ int	is_valid_variable_char(char c, char *str)
 
 int	tokenize(t_token *parent, char **line)
 {
-	t_token	*current;
+	t_token	*cur;
 	int		escaped;
 	t_token	empty;
 	char	c;
 
 	empty = null_token();
-	current = &empty;
+	cur = &empty;
 	escaped = parent->type == T_SINGLE_QUOTE;
 	while (**line)
 	{
@@ -76,54 +70,54 @@ int	tokenize(t_token *parent, char **line)
 		++*line;
 		if (c == '\\' && !escaped)
 		{
-			if (!(current->quoted))
-				current = new_token(parent->children, T_WORD, current);
+			if (!(cur->quoted))
+				cur = new_token(parent->children, T_WORD, cur, TRUE);
 			escaped = 1;
 			continue ;
 		}
-		else if (current->type != T_SINGLE_QUOTE && c == '$' && !escaped)
+		else if (cur->type != T_SINGLE_QUOTE && c == '$' && !escaped)
 		{
-			current = new_token(parent->children, T_VAR, current);
+			cur = new_token(parent->children, T_VAR, cur, TRUE);
 			continue ;
 		}
 		if (!parent->quoted && !escaped)
 		{
 			if (c == '|')
-				current = new_token(parent->children, T_PIPE, current);
+				cur = new_token(parent->children, T_PIPE, cur, TRUE);
 			else if (c == '\"')
 			{
-				current = new_token(parent->children, T_DOUBLE_QUOTE, current);
-				if (!tokenize(current, line))
+				cur = new_token(parent->children, T_DOUBLE_QUOTE, cur, TRUE);
+				if (!tokenize(cur, line))
 					return (FALSE);
 				continue ;
 			}
 			else if (c == '\'')
 			{
-				current = new_token(parent->children, T_SINGLE_QUOTE, current);
-				if (!tokenize(current, line))
+				cur = new_token(parent->children, T_SINGLE_QUOTE, cur, TRUE);
+				if (!tokenize(cur, line))
 					return (FALSE);
 				continue ;
 			}
 			else if (c == ' ' || c == '\t')
-				current = new_token(parent->children, T_WHITESPACE, current);
+				cur = new_token(parent->children, T_WHITESPACE, cur, TRUE);
 			else if (c == '<')
-				current = new_token(parent->children, T_REDIRECT_IN, current);
+				cur = new_token(parent->children, T_REDIRECT_IN, cur, TRUE);
 			else if (c == '>')
-				current = new_token(parent->children, T_REDIRECT_OUT, current);
+				cur = new_token(parent->children, T_REDIRECT_OUT, cur, TRUE);
 			else if (c == ';')
-				current = new_token(parent->children, T_SEPARATOR, current);
-			else if (current->type != T_VAR
-				|| !is_valid_variable_char(c, *current->buffer))
-				current = new_token(parent->children, T_WORD, current);
+				cur = new_token(parent->children, T_SEPARATOR, cur, TRUE);
+			else if (cur->type != T_VAR
+				|| !is_valid_variable_char(c, *cur->buffer))
+				cur = new_token(parent->children, T_WORD, cur, TRUE);
 		}
 		else if ((c == '\"' && !escaped && parent->type == T_DOUBLE_QUOTE))
 			return (TRUE);
 		else if ((c == '\'' && parent->type == T_SINGLE_QUOTE))
 			return (TRUE);
-		else if (current->type != T_VAR
-			|| !is_valid_variable_char(c, *current->buffer))
-			current = new_token(parent->children, T_WORD, current);
-		str_cappend(current->buffer, c);
+		else if (cur->type != T_VAR
+			|| !is_valid_variable_char(c, *cur->buffer))
+			cur = new_token(parent->children, T_WORD, cur, TRUE);
+		str_cappend(cur->buffer, c);
 		escaped = parent->type == T_SINGLE_QUOTE;
 	}
 	if (escaped || parent->quoted)
diff --git a/src/scros.c b/src/scros.c
index 8ecb614..a0c7ba1 100644
--- a/src/scros.c
+++ b/src/scros.c
@@ -82,6 +82,11 @@ char	*parse_variable(char *str)
 
 int	parse_token(t_token *token, char **container)
 {
+	t_list		*var_tokens;
+	t_token		*current;
+	int			index;
+	t_iterator	it;
+
 	if (token->quoted)
 	{
 		if (token->children->size)
@@ -91,8 +96,19 @@ int	parse_token(t_token *token, char **container)
 	}
 	else if (token->type == T_VAR)
 	{
-		// as_listf(ft_split())
-		str_append(container, parse_variable(*(token->buffer)));
+		var_tokens = as_listf((void **)ft_split(
+					parse_variable(*(token->buffer)), ' '), free);
+		index = lst_index_of(token->parent, NULL, token);
+		it = iterator_new(var_tokens);
+		while (iterator_has_next(&it))
+		{
+			current = new_token(token->parent, T_WORD, NULL, FALSE);
+			str_append(current->buffer, iterator_next(&it));
+			lst_insert(token->parent, ++index, current);
+			if (iterator_has_next(&it))
+				lst_insert(token->parent, ++index,
+					new_token(token->parent, T_WHITESPACE, NULL, FALSE));
+		}
 	}
 	else
 		str_append(container, *(token->buffer));
@@ -117,6 +133,7 @@ int	validate(t_list *commands, t_list *tokens)
 	while (current || !started)
 	{
 		started = 1;
+		current->parent = command->tokens;
 		lst_push(command->tokens, current);
 		if (current->type == T_WHITESPACE)
 			space = 1;
